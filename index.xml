<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://bg2bkk.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Feb 2016 20:57:19 +0800</lastBuildDate>
    <atom:link href="https://bg2bkk.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>livestream的几种初步解决方案</title>
      <link>https://bg2bkk.github.io/post/livestream%E7%9A%84%E5%87%A0%E7%A7%8D%E5%88%9D%E6%AD%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 18 Feb 2016 20:57:19 +0800</pubDate>
      
      <guid>https://bg2bkk.github.io/post/livestream%E7%9A%84%E5%87%A0%E7%A7%8D%E5%88%9D%E6%AD%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>

&lt;h1 id=&#34;实时视频流解决方案:522c154dca6ec9c4e9be4965f54df0ed&#34;&gt;实时视频流解决方案&lt;/h1&gt;

&lt;h2 id=&#34;mjpg-streamer:522c154dca6ec9c4e9be4965f54df0ed&#34;&gt;mjpg-streamer&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;site: https://github.com/codewithpassion/mjpg-streamer/tree/master/mjpg-streamer

    link: http://www.cnblogs.com/hnrainll/archive/2011/06/08/2074909.html
    link: http://blog.163.com/chenhongswing@126/blog/static/1335924432011825104144612/
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    #提供一个可以直接使用的demo

    git clone https://github.com/codewithpassion/mjpg-streamer/tree/master/mjpg-streamer

    cd mjpg-streamer

    ./mjpg_streamer -i &amp;quot;input_uvc.so -d /dev/video0 -r 640x480 -y&amp;quot; -o &amp;quot;output_http.so -w ./www&amp;quot;

    127.0.0.1:8080访问主页，可以获得stream、static以及通过vlc和mplayer播放
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ffmpeg-websocket播放:522c154dca6ec9c4e9be4965f54df0ed&#34;&gt;ffmpeg+websocket播放&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;site: https://github.com/phoboslab/jsmpeg
link: http://segmentfault.com/a/1190000000392586
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    #提供可以直接运行的demo

    git clone https://github.com/phoboslab/jsmpeg

    nodejs stream-server.js huang	监听随机端口
        Listening for MPEG Stream on http://127.0.0.1:8082/&amp;lt;secret&amp;gt;/&amp;lt;width&amp;gt;/&amp;lt;height&amp;gt;
        Awaiting WebSocket connections on ws://127.0.0.1:8084/
        Stream Connected: 127.0.0.1:52460 size: 640x480
        New WebSocket Connection (1 total)
        Disconnected WebSocket (0 total)

    ffmpeg -s 640x480 -f video4linux2 -i /dev/video0 -f mpeg1video -b 800k -r 30 http://localhost:8082/huang/640/480/		ffmpeg采集编码并发送视频流
    google-chrome stream-example.html		使用websocket在线观看
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;视频流解决方案&lt;/p&gt;

&lt;p&gt;1、vlc
    &lt;a href=&#34;http://www.cnblogs.com/fx2008/p/4315416.html&#34;&gt;http://www.cnblogs.com/fx2008/p/4315416.html&lt;/a&gt;
    a、关掉防火墙，至少将视频流端口开启
    b、vlc &amp;ndash;ttl 12 -vvv &amp;ndash;color -I telnet &amp;ndash;telnet-password videolan &amp;ndash;rtsp-host 0.0.0.0 &amp;ndash;rtsp-port 5554
    c、通过telnet启动vlc的vlm管理中，telnet 127.0.0.1 4212，密码是刚才的videolan
    d、new Test vod enabled 新建一个vod，名字是Test
    e、setup Test input /path/video.file    给Test输入视频
    f、vlc rtsp://127.0.0.1:5554/Test 启动vlc观看视频流，这里还差声音&lt;/p&gt;

&lt;p&gt;2、nginx的rtmp转播
    &lt;a href=&#34;http://itony.me/619.html&#34;&gt;http://itony.me/619.html&lt;/a&gt;
    &lt;a href=&#34;https://github.com/arut/nginx-rtmp-module&#34;&gt;https://github.com/arut/nginx-rtmp-module&lt;/a&gt;
    openresty.org
    &lt;a href=&#34;http://blog.csdn.net/leixiaohua1020/article/details/12029543&#34;&gt;http://blog.csdn.net/leixiaohua1020/article/details/12029543&lt;/a&gt;
    &lt;a href=&#34;http://blog.csdn.net/leixiaohua1020/article/details/39803457&#34;&gt;http://blog.csdn.net/leixiaohua1020/article/details/39803457&lt;/a&gt;
    &lt;a href=&#34;http://blog.csdn.net/fireroll/article/details/18899285&#34;&gt;http://blog.csdn.net/fireroll/article/details/18899285&lt;/a&gt;
    a、安装openresty和rtmp模块
    b、配置nginx，rtmp配置块与http配置块平级
        rtmp {
            server {
                listen 1935;
                application live1 {
                    live on;
                    record off;
                }
            }
        }
    c、ffmpeg转发视频流  ffmpeg -re -i xxx.mp4 -c copy -f flv   rtmp://localhost:1935/live1/room1
        其中的live1是应用，room1是将来要打开的节点
    d、在vlc中打开视频流： rtmp://localhost:1935/live1/room1
    e、  ffmpeg -f video4linux2 -i /dev/video0 -c:v libx264 -an -f flv
    rtmp://localhost:1935/live1/room1 试试摄像头&lt;/p&gt;

&lt;p&gt;3、aliyun+nginx+rtmp在线转播&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://blog.csdn.net/xdwyyan/article/details/43198985
注意：在nginx中配置rtmp后，reload是不够的，需要kill掉重新启动nginx。通过sudo
netstat -tlnp | grep 1935来观察nginx是否将端口打开

sudo ffmpeg -i /dev/video0 -acodec acc -strict experimental -ar 44100 -ac 2 -b:a 96k -r 25 -b:v 500k -s 640*480 -f flv rtmp://101.200.124.174:1935/live1/room1
vlc rtmp://101.200.124.174:1935/live1/room1

ffmpeg -loglevel verbose -re -i xxx.mp4 -vcodec libx264 -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp://101.200.124.174:1935/hls/movie
vlc http://101.200.124.174/hls/movie

ffmpeg -f video4linux2 -s 320x240 -i /dev/video0 -vcodec libx264 -f flv  rtmp://101.200.124.174:1935/hls/movie
vlc http://101.200.124.174/hls/movie
手机浏览器打开也行
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4、防火墙设置
    usr/local/bin/ss-server -u -c ./fakang.json &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
    huang@vultr:~$ sudo iptables -A INPUT -m state &amp;ndash;state NEW -m tcp -p tcp &amp;ndash;dport 1985 -j ACCEPT&lt;/p&gt;

&lt;p&gt;5、ffmpeg的使用方法及参数&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://bg2bkk.github.io/about/</link>
      <pubDate>Thu, 18 Feb 2016 20:45:46 +0800</pubDate>
      
      <guid>https://bg2bkk.github.io/about/</guid>
      <description>

&lt;h1 id=&#34;黄振栋:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;黄振栋&lt;/h1&gt;

&lt;p&gt;未知太多&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>